# -*- coding: utf-8 -*-
"""LVADSUSR164_R_LOKESH_LAB2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xPEiZwWUfmpFtPR75XquQnqEYUXCfywq
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.ensemble import RandomForestClassifier,IsolationForest
from sklearn.metrics import confusion_matrix, classification_report, f1_score, accuracy_score, recall_score, precision_score
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/penguins_classification.csv')

df.head()

df.info()

df.shape

df.describe()

df.isnull().sum()

df['bill_depth_mm'] = df['bill_depth_mm'].fillna(value=df['bill_depth_mm'].mean())

df.isnull().sum()

df.duplicated().sum()

for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

for column in df.select_dtypes(include=['object']).columns:
    df1 = df[column].value_counts().reset_index()
    plt.figure(figsize=(10, 5))
    sns.histplot(data=df1,)
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

sns.boxplot(df)

L = LabelEncoder()
df['island'] = L.fit_transform(df['island'])

df['species'] = df['species'].map({"Adelie":1,"Gentoo":2})

df['species'].value_counts()

df.head()

plt.figure(figsize=(10,5))
sns.heatmap(df.corr(),annot=True)

df1 = df.select_dtypes(include=['float64', 'int64'])
q1 = df1.quantile(0.25)
q3 = df1.quantile(0.75)
IQR = q3 - q1
outliers = ((df1 < (q1 - 1.5*IQR)) | (df1 > (q3 + 1.5*IQR))).any(axis=1)
df = df[~outliers]
df.head()

X = df.drop(columns=['species'])
Y = df['species']

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=102)

S = MinMaxScaler()
X_train = S.fit_transform(X_train)
X_test = S.transform(X_test)

model= RandomForestClassifier()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)

#confusion matrix
print("Confusion Matrix:",confusion_matrix(y_pred,y_test))
print("Classification Report:",classification_report(y_pred,y_test))
print("Accuracy:",accuracy_score(y_test,y_pred))
print("Precision:",precision_score(y_test,y_pred))
print("Recall:",recall_score(y_test,y_pred))
print("F1 score:",f1_score(y_test,y_pred))

