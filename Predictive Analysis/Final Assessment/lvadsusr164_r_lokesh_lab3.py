# -*- coding: utf-8 -*-
"""LVADSUSR164_R_LOKESH_LAB3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q1j8AvpQtFRehSgMMU015D3Pi9ofGC7E
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.cluster import KMeans
from sklearn.metrics import  silhouette_score
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/customer_segmentation.csv')

df.head()

df.info()

df.shape

df.describe()

df.isnull().sum()

df['Income'] = df['Income'].fillna(value = df['Income'].mean())

df.isnull().sum()

df.duplicated().sum()

df.columns

df = df.drop(columns=['ID','Year_Birth','Education','Marital_Status','Kidhome','Teenhome','Dt_Customer','AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1',
       'AcceptedCmp2', 'Complain', 'Z_CostContact', 'Z_Revenue', 'Response'])

df.info()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

plt.figure(figsize=(15,10))
sns.boxplot(df)

df1 = df.select_dtypes(include=['float64', 'int64'])
q1 = df1.quantile(0.25)
q3 = df1.quantile(0.75)
IQR = q3 - q1
outliers = ((df1 < (q1 - 1.5*IQR)) | (df1 > (q3 + 1.5*IQR))).any(axis=1)
df = df[~outliers]
df.head()

plt.figure(figsize=(15,10))
sns.heatmap(df.corr(numeric_only=True),annot=True)

df.isnull().sum()

# S = MinMaxScaler()
# X = S.fit_transform(df)
X = df

#K-means
see = []
k_values = range(1, 11)
for k in k_values:
    kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(X)
    see.append(kmeans.inertia_)

plt.figure(figsize=(16, 6))
plt.plot(k_values, see, marker='o',color='#8B4513')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Within Cluster Sum of Squares')
plt.show()

kmeans = KMeans(n_clusters=3)
kmeans.fit(df)
cluster_labels = kmeans.labels_
df['cluster'] =  kmeans.labels_

df.head()

plt.figure(figsize=(12,10))
sns.scatterplot(data=df, x='Recency', y='Income', hue='cluster', palette='viridis', s=100)
centroids = df.groupby('cluster').mean()[['Recency', 'Income']]
plt.scatter(centroids['Recency'], centroids['Income'], marker='X', color='red', s=100, label='Centroids')
plt.xlabel('Recency')
plt.ylabel('Income')
plt.title('Scatter plot with Cluster Centroids')
plt.legend()
plt.show()

silhouette_score(df,cluster_labels)

