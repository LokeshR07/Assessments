# -*- coding: utf-8 -*-
"""Predictive_Internal1_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tJ6Yk_QQPQjU6onphvBqkqM9YAMa4-km
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report,r2_score,mean_squared_error

df = pd.read_csv('/content/expenses.csv')

df.head()

df.info()

df.describe(include = 'all')

df.isnull().sum()

df.duplicated().value_counts()

df = df.drop_duplicates()

df['bmi'] = df['bmi'].fillna(value = df['bmi'].median())

df.isnull().sum()

df.head()

df.info()

colum = df.select_dtypes(include = ['object']).columns
for col in colum:
  sns.boxplot(df,x=df[col])
  plt.title(f'Box Plot of {col}')
  plt.xlabel(col)
  plt.show()

sns.boxplot(df,x=df['charges'])

edf = pd.get_dummies(df,columns = ['region'])

edf.head()

l = LabelEncoder()

colum = edf.select_dtypes(include = ['object','bool']).columns
for col in colum:
  edf[col] = l.fit_transform(edf[col])

edf.head()

plt.figure(figsize=(10,10))
sns.heatmap(edf.corr(),annot=True)

X=edf.drop(columns=['charges'])
Y=edf['charges']

x_train ,x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=102)

scaler = MinMaxScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

model = LinearRegression()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)
rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)

plt.scatter(y_pred,y_test)

